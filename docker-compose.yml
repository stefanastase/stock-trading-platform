version: "3.9"
services:
  auth:
    hostname: auth
    image: gitlab.cs.pub.ro:5050/idp_2023_stock_trading_platform/stock_trading_auth:latest
    environment:
      HOST_NAME: postgres
      AUTH_DB_NAME: auth
      PORTFOLIOS_DB_NAME: portfolios
      DB_USER: user
      DB_PASSWORD: password
      AUTH_SECRET: secret
      EXPIRE_TIME_SEC: 1800 # 30 min
    networks:
      - db_auth
      - internal

  trading-platform:
    hostname: trading-platform
    image: gitlab.cs.pub.ro:5050/idp_2023_stock_trading_platform/stock_trading_platform
    environment:
      ORDER_SECRET: orderSecret
    logging:
      driver: loki
      options:
          loki-url: http://host.docker.internal:3100/loki/api/v1/push
          loki-external-labels: job=myjob,owner=stefan,environment=development

    networks:
      - platform
      - internal
      - logging

# TODO different credentials
  portfolio-mgmt:
    hostname: portfolio-mgmt
    image: gitlab.cs.pub.ro:5050/idp_2023_stock_trading_platform/stock_trading_portfolio_management
    environment:
      HOST_NAME: postgres
      DB_NAME: portfolios 
      DB_USER: user
      DB_PASSWORD: password
    networks:
      - db_portfolio
      - platform

  order-mgmt:
    hostname: order-mgmt
    image: gitlab.cs.pub.ro:5050/idp_2023_stock_trading_platform/stock_trading_order_management
    environment:
      HOST_NAME: postgres
      DB_NAME: orders
      DB_USER: user
      DB_PASSWORD: password
      ORDER_SECRET: orderSecret
    networks:
      - db_order
      - platform

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth
    deploy:
      placement:
        constraints: [node.role == manager]

    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - db_auth
      - db_order
      - db_portfolio
      - db_admin
  
  adminer:
    image: adminer:latest
    ports:
      - 8080:8080
    networks:
      - db_admin
      - internal

  kong:
    image: kong:latest
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 80:8000
      - 443:8443
      - 8001:8001
      - 8444:8444
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - internal
      - logging
  
  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./grafana/data:/var/lib/grafana
    ports:
      - 3000:3000
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - logging
  
  loki:
    image: grafana/loki
    volumes:
        - ./loki/loki.yml:/etc/config/loki.yml
        - ./loki/wal:/wal
    entrypoint:
        - /usr/bin/loki
        - -config.file=/etc/config/loki.yml
    ports:
        - 3100:3100
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
        - logging

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - logging

  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
    

volumes:
  postgres-data:
  portainer_data:

networks:
  agent_network:
      driver: overlay
      attachable: true
  db_auth:
  db_order:
  db_portfolio:
  db_admin:
  platform:
  internal:
  logging: